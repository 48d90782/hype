#ifndef HYPE_PROFILE_H
#define HYPE_PROFILE_H

#include <boost/numeric/ublas/vector.hpp>
#include <string>

typedef struct ValueType_s {
    // Type and uint do not present in proto file
    // Used only for parsing
    // cpu, wall, inuse_space, etc
    std::string type;
    // seconds, nanoseconds, bytes, etc
    std::string unit;

    // index in the string table
    int64_t type_index;
    // index in the string table
    int64_t unit_index;
} ValueType_t;

typedef struct Sample_s {
} Sample_t;

typedef struct Location_s {
} Location_t;

// mapping corresponds to Profile.Mapping
typedef struct Mapping_s {
    // Unique nonzero id for the mapping.
    uint64_t id;
    // Address at which the binary (or DLL) is loaded into memory.
    uint64_t memory_start;
    // The limit of the address range occupied by this mapping.
    uint64_t memory_limit;
    // Offset in the binary that corresponds to the first mapped address.
    uint64_t memory_offset;
    // Index into string table
    // The object this entry is loaded from.  This can be a filename on
    // disk for the main binary and shared libraries, or virtual
    // abstractions like "[vdso]".
    std::string filename;
    // Index into string table
    // A string that uniquely identifies a particular program version
    // with high probability. E.g., for binaries generated by GNU tools,
    // it could be the contents of the .note.gnu.build-id field.
    std::string build_id;
    bool has_function;
    bool has_filenames;
    bool has_line_numbers;
    bool has_inline_frames;

    // Index into string table
    int64_t filename_index;
    // Index into string table
    int64_t build_id_index;
} Mapping_t;

typedef struct Function_s {
    // Unique nonzero id for the function.
    uint64_t id;
    // Name of the function, in human-readable form if available.
    std::string name;
    // Name of the function, as identified by the system.
    // For instance, it can be a C++ mangled name.
    std::string system_name;
    // Source file containing the function.
    std::string filename;
    // Line number in source file.
    int64_t start_line;

    // HELPERS
    // Index into string table
    int64_t name_index;
    // Index into string table
    int64_t system_name_index;
    // Index into string table
    int64_t filename_index;
} Function_t;

typedef struct Profile_s {
    boost::numeric::ublas::vector<int> sample_type;


} Profile_t;

#endif //HYPE_PROFILE_H
